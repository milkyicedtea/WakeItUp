name: Build and Release Android App

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $ENCODED_STRING | base64 -di > app/keystore.jks

      - name: Run tests
        run: ./gradlew test

      - name: Run lint
        run: ./gradlew lintRelease

      - name: Build release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Build release AAB (Android App Bundle)
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew bundleRelease

      - name: Get APK path and rename
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
          APP_NAME=$(grep "android:label" app/src/main/AndroidManifest.xml | sed 's/.*android:label="\([^"]*\)".*/\1/' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | sed 's/.*versionName.*"\([^"]*\)".*/\1/')
          
          # If we can't extract app name, use a default
          if [ -z "$APP_NAME" ]; then
            APP_NAME="android-app"
          fi
          
          # If we can't extract version, use the tag name
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME="${GITHUB_REF#refs/tags/}"
          fi
          
          NEW_APK_NAME="${APP_NAME}-${VERSION_NAME}.apk"
          cp "$APK_PATH" "$NEW_APK_NAME"
          echo "APK_FILE=$NEW_APK_NAME" >> $GITHUB_ENV

      - name: Get AAB path and rename
        run: |
          AAB_PATH=$(find app/build/outputs/bundle/release -name "*.aab" | head -1)
          APP_NAME=$(grep "android:label" app/src/main/AndroidManifest.xml | sed 's/.*android:label="\([^"]*\)".*/\1/' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | sed 's/.*versionName.*"\([^"]*\)".*/\1/')
          
          # If we can't extract app name, use a default
          if [ -z "$APP_NAME" ]; then
            APP_NAME="android-app"
          fi
          
          # If we can't extract version, use the tag name
          if [ -z "$VERSION_NAME" ]; then
            VERSION_NAME="${GITHUB_REF#refs/tags/}"
          fi
          
          NEW_AAB_NAME="${APP_NAME}-${VERSION_NAME}.aab"
          cp "$AAB_PATH" "$NEW_AAB_NAME"
          echo "AAB_FILE=$NEW_AAB_NAME" >> $GITHUB_ENV

      - name: Upload APK to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: |
            ${{ env.APK_FILE }}
            ${{ env.AAB_FILE }}

      - name: Upload build artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: |
            ${{ env.APK_FILE }}
            ${{ env.AAB_FILE }}
          retention-days: 7