name: Build and Release Android App

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          gradle-version: '8.14'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $ENCODED_STRING | base64 -di > app/keystore.jks

      - name: Run tests
        run: ./gradlew test

      - name: Run lint
        run: ./gradlew lintRelease

      - name: Build release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Build release AAB (Android App Bundle)
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: ./gradlew bundleRelease

      - name: Get APK path and rename
        run: |
          echo "Searching for APK in app/build/outputs/apk/release/"
          APK_PATH_FOUND=$(find app/build/outputs/apk/release -name "*.apk" -type f | head -1)

          if [ -z "$APK_PATH_FOUND" ]; then
            echo "Error: No APK found in app/build/outputs/apk/release. Listing contents:"
            ls -R app/build/outputs/apk/release || echo "Path app/build/outputs/apk/release does not exist or is empty."
            exit 1
          fi
          echo "Found APK at: $APK_PATH_FOUND"

          # Use repository name as a base for the app name (more reliable for filenames)
          # Sanitize it: lowercase and replace spaces with hyphens
          APP_BASENAME_RAW="${{ github.event.repository.name }}"
          APP_BASENAME=$(echo "$APP_BASENAME_RAW" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          if [ -z "$APP_BASENAME" ]; then
            APP_BASENAME="android-app" # Fallback
          fi
          echo "Using app basename for file: $APP_BASENAME"

          # Use the Git tag for the version (most reliable for releases)
          VERSION_TAG_FROM_REF="${GITHUB_REF#refs/tags/}"
          # Remove 'v' prefix if it exists, e.g. v0.1.0 -> 0.1.0
          VERSION_FOR_FILENAME=$(echo "$VERSION_TAG_FROM_REF" | sed 's/^v//')

          if [ -z "$VERSION_FOR_FILENAME" ]; then
            echo "Warning: Could not determine version from Git tag ($GITHUB_REF). Using 'unknown-version'."
            VERSION_FOR_FILENAME="unknown-version"
          fi
          echo "Using version for filename: $VERSION_FOR_FILENAME"

          NEW_APK_NAME="${APP_BASENAME}-${VERSION_FOR_FILENAME}.apk"
          echo "New APK name will be: $NEW_APK_NAME"

          echo "Copying '$APK_PATH_FOUND' to '$NEW_APK_NAME'"
          cp "$APK_PATH_FOUND" "$NEW_APK_NAME"
          echo "APK_FILE=$NEW_APK_NAME" >> $GITHUB_ENV

      - name: Get AAB path and rename
        run: |
          echo "Searching for AAB in app/build/outputs/bundle/release/"
          AAB_PATH_FOUND=$(find app/build/outputs/bundle/release -name "*.aab" -type f | head -1)

          if [ -z "$AAB_PATH_FOUND" ]; then
            echo "Error: No AAB found in app/build/outputs/bundle/release. Listing contents:"
            ls -R app/build/outputs/bundle/release || echo "Path app/build/outputs/bundle/release does not exist or is empty."
            exit 1
          fi
          echo "Found AAB at: $AAB_PATH_FOUND"

          APP_BASENAME_RAW="${{ github.event.repository.name }}"
          APP_BASENAME=$(echo "$APP_BASENAME_RAW" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          if [ -z "$APP_BASENAME" ]; then
            APP_BASENAME="android-app" # Fallback
          fi
          echo "Using app basename for file: $APP_BASENAME"

          VERSION_TAG_FROM_REF="${GITHUB_REF#refs/tags/}"
          VERSION_FOR_FILENAME=$(echo "$VERSION_TAG_FROM_REF" | sed 's/^v//')

          if [ -z "$VERSION_FOR_FILENAME" ]; then
            echo "Warning: Could not determine version from Git tag ($GITHUB_REF). Using 'unknown-version'."
            VERSION_FOR_FILENAME="unknown-version"
          fi
          echo "Using version for filename: $VERSION_FOR_FILENAME"

          NEW_AAB_NAME="${APP_BASENAME}-${VERSION_FOR_FILENAME}.aab"
          echo "New AAB name will be: $NEW_AAB_NAME"
          
          echo "Copying '$AAB_PATH_FOUND' to '$NEW_AAB_NAME'"
          cp "$AAB_PATH_FOUND" "$NEW_AAB_NAME"
          echo "AAB_FILE=$NEW_AAB_NAME" >> $GITHUB_ENV

      - name: Upload APK to release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'release' && github.event.action == 'created'
        with:
          files: |
            ${{ env.APK_FILE }}
            ${{ env.AAB_FILE }}

      - name: Upload build artifacts (backup)
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: |
            ${{ env.APK_FILE }}
            ${{ env.AAB_FILE }}
          retention-days: 7